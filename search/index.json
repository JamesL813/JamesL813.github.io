[{"content":"Motivation Imagine we are interested in determining the CMDA 4654 classmate that lives nearest to us. The “brute force” approach would be to ask each classmate where they live (i.e. make the search region , compute the distance between their house and ours, and then select the minimum distance. This is quite computationally expensive. In fact, it has a time complexity of O(2n), assuming 2-dimensional distance computations. A better approach might be to partition the class into different groups based on the broader attributes of their location. For instance, we can ask everyone who lives in Blacksburg to stand on one side of the classroom, while those that don’t (i.e. live in Christiansburg) stand on the other. Then, if we live in Blacksburg, we are able to reduce the size of the group that we compute our distance to. We can continue to partition the group based on other factors (i.e. on-campus vs off-campus, north vs south, etc) to further reduce the size of the search group. Then, the time complexity of our algorithm is going to be O(n+log(n)), which is much better than vanilla kNN.\nHowever, we might find someone who lives on the edge of campus and whose nearest neighbor is off-campus, which will never be found due to the clustering nature of this algorithm.\nThis idea of partitioning the data into subsets that will later be used to search for nearest neighbor within that subset (and hope that it’s the global nearest neighbor) is the idea behind clustering using k-d trees and ball trees.\nIntro to Decision Trees A tree is a common data structure composed of a hierarchical structure with branch nodes, and leaf nodes. They can be useful for providing a visual representation for a data set or model. A binary tree is one of the simplest implementations of the structure. It’s simply a way of storing a set of ordered data. The rules that make up a binary tree are as follows:\n\\\nEach node must have at most 2 children A node’s left child must come before it A node’s right child must come after it. Using these simple rules, we can create a data structure that is computationally efficient to retrieve data from.\\\nNotice that each node in this example tree not only stores a data point, but it also represents a decision that each incoming data point has to make as it goes through the tree. Whether the result of this decision is true or false determines which direction the point will move next.\nKD Trees A K-D tree (or a K-dimensional tree) is a special type of decision tree that can organize data for efficient spatial search or nearest-neighbor search within K-dimensional space.\nIn data modeling, each one of K dimensions normally represents a specific feature of the data set.\nThe basic idea of k-d trees is to partition our feature space along the axes and prune subtrees that are too far away from our nearest neighbor(s) (essentially depth first search with pruning).\nProcess The basic idea of k-d trees is to partition our feature space along the axes and prune subtrees that are too far away from our nearest neighbor(s).\n\\\nWe construct the tree by partitioning our data into halves along one feature We then rotate through our features based on which of them have the largest maximum variance and continue partitioning our data. When considering a test point and its nearest neighbors, we calculate the distance between them, call it $x_d$ \\\nCompare $x_d$ to the distance between the point and the partition, $x_p$ If $x_p \u0026gt; x_d$, we can prune that subtree If $x_p \u0026lt; x_d$, recalculate nearest neighbor Continue until all leaf nodes have been visited.\nLimitations K-d trees are really only effective in low dimensional spaces and is not very accurate in high dimensional spaces.\n\\\nIn higher dimensions, the points end up being close to every partition (i.e. a million partition lines) Partitions are along axes and span the entire feature space, which proves to be problematic as the number of features grows Nearest neighbors begins to lose meaning since the distance between the closest and farthest point are very similar. Example: The IRIS Dataset We will use the Iris data to demonstrate KD trees using\nCode to draw these rectangles in R:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 library(ggplot2) ggplot(iris, aes(x=Petal.Length, y=Petal.Width, col=Species)) + geom_point() + labs(x=\u0026#34;Petal Length\u0026#34;, y=\u0026#34;Petal Width\u0026#34;, title = \u0026#34;Petal Length vs. Petal Width\u0026#34;) + theme_bw() + #geom_vline(xintercept = median(iris$Petal.Length)) + geom_rect(aes(xmin=4.35, xmax=6.9, ymin=1.8, ymax=2.5), fill=NA, color=\u0026#34;blue\u0026#34;, alpha=0.25) + geom_rect(aes(xmin=4.35, xmax=6.9, ymin=0, ymax=1.8), fill=NA, color=\u0026#34;blue\u0026#34;, alpha=0.25) + geom_rect(aes(xmin=0, xmax=4.35, ymin=0.3, ymax=2.5), fill=NA, color=\u0026#34;blue\u0026#34;, alpha=0.25) + geom_rect(aes(xmin=0, xmax=4.35, ymin=0, ymax=0.3), fill=NA, color=\u0026#34;blue\u0026#34;, alpha=0.25) + geom_rect(aes(xmin=3.85, xmax=4.35, ymin=0.3, ymax=2.5), fill=NA, color=\u0026#34;green\u0026#34;, alpha=0.25) + geom_rect(aes(xmin=0, xmax=3.85, ymin=0.3, ymax=2.5), fill=NA, color=\u0026#34;green\u0026#34;, alpha=0.25) + geom_rect(aes(xmin=0, xmax=1.4, ymin=0, ymax=0.3), fill=NA, color=\u0026#34;green\u0026#34;, alpha=0.25) + geom_rect(aes(xmin=1.4, xmax=4.35, ymin=0, ymax=0.3), fill=NA, color=\u0026#34;green\u0026#34;, alpha=0.25) + geom_rect(aes(xmin=4.35, xmax=4.6, ymin=0, ymax=1.8), fill=NA, color=\u0026#34;green\u0026#34;, alpha=0.25) + geom_rect(aes(xmin=4.6, xmax=6.9, ymin=0, ymax=1.8), fill=NA, color=\u0026#34;green\u0026#34;, alpha=0.25) + geom_rect(aes(xmin=4.35, xmax=5.6, ymin=1.8, ymax=2.5), fill=NA, color=\u0026#34;green\u0026#34;, alpha=0.25) + geom_rect(aes(xmin=5.6, xmax=6.9, ymin=1.8, ymax=2.5), fill=NA, color=\u0026#34;green\u0026#34;, alpha=0.25) Ball trees A ball tree is a space partitioning data structure for organizing points in a multidimensional space. Each internal node partitions the data into two disjoint sets which are associated with different balls. Each point is assigned to the ball with the closest center.\n$$ D^B (t) = \\begin{cases} \\max( |t - B.pivot | - B.radius, D^{B.parent} ),\\quad \\text{ if }B \\neq R \\ \\max( |t - B.pivot | - B.radius, D^{B.parent}, 0 ), \\text{ if }B = R \\ \\end{cases} $$\nMotivation The ball tree algorithm is similar to k-d trees in that they both partition in terms of the feature space, but unlike k-d trees, the trees are partitioned into hyperplane spheres instead of boxes. While ball tree performance may suffer in lower dimensional feature spaces, Ball tree performance of with O(n log(n)) is still better than kNN training speed of O(nd)\nExample: The IRIS dataset 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 source(\u0026#34;ball_tree.R\u0026#34;) # scales all numeric columns iris_scaled \u0026lt;- iris %\u0026gt;% mutate_if(is.numeric, scale) # columns to plot isc \u0026lt;- iris_scaled[, c(3:4)] # builds the tree bt \u0026lt;- build_ball_tree(isc, c(1:nrow(isc), min_points = 2)) ggplot() + geom_balltree(bt, max_depth = 4) + geom_point( data = iris_scaled, pch = 21, size = 3, aes(x = Petal.Length, y = Petal.Width, fill = Species) ) + theme_classic() + scale_colour_stepsn(colors = c(\u0026#34;purple4\u0026#34;,\u0026#34;red\u0026#34;,\u0026#34;orange1\u0026#34;)) Housing Data The housing data we chose to use analyzed 12 different building shapes. Each building differs with respect to the glazing area, the glazing area distribution, and the orientation, amongst other parameters. With the data being found here.\nName Definition X1 Relative Compactness X2 Surface Area X3 Wall Area X4 Roof Area X5 Overall Height X6 Orientation X7 Glazing Area X8 Glazing Area Distribution y1 Heating Load y2 Cooling Load KD tree approach 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 library(FNN) library(caret) house = read.csv(\u0026#34;data/ENB2012_data.csv\u0026#34;) house1 = house[c(1:768),-c(6,8)] index \u0026lt;- sample(1:nrow(house1), round(nrow(house1) * 0.7)) training_df \u0026lt;- house1[index, ] testing_df \u0026lt;- house1[-index, ] # Store the training/testing data features train_features \u0026lt;- training_df[,-3] test_features \u0026lt;- testing_df[, -3] # Store the actual labels train_classes \u0026lt;- training_df$X3 test_classes \u0026lt;- testing_df$X3 house_kd = knn(train = train_features, test = test_features, cl = train_classes, k = 5, algorithm=c(\u0026#34;kd_tree\u0026#34;)) confusionMatrix(data = house_kd, reference = as.factor(test_classes)) Confusion Matrix 1 2 3 4 5 6 7 8 9 10 11 confusion.table = table(\u0026#34;predicted\u0026#34; = house_kd, \u0026#34;actual\u0026#34; = as.factor(test_classes)) plt \u0026lt;- as.data.frame(confusion.table) plt$predicted \u0026lt;- factor(plt$predicted, levels=rev(levels(plt$predicted))) ggplot(plt, aes(actual,predicted, fill= Freq)) + geom_tile() + geom_text(aes(label=Freq)) + scale_fill_gradient(low=\u0026#34;white\u0026#34;, high=\u0026#34;#CF4420\u0026#34;) + labs(x = \u0026#34;Reference\u0026#34;,y = \u0026#34;Prediction\u0026#34;) + scale_x_discrete(labels=c(\u0026#34;245\u0026#34;,\u0026#34;269.5\u0026#34;,\u0026#34;294\u0026#34;,\u0026#34;318.5\u0026#34;,\u0026#34;343\u0026#34;,\u0026#34;367.5\u0026#34;,\u0026#34;416.5\u0026#34;), position = \u0026#34;top\u0026#34;) + scale_y_discrete(labels=c(\u0026#34;416.5\u0026#34;,\u0026#34;367.5\u0026#34;,\u0026#34;343\u0026#34;,\u0026#34;318.5\u0026#34;,\u0026#34;294\u0026#34;,\u0026#34;269.5\u0026#34;,\u0026#34;245\u0026#34;)) Ball Tree Approach kNN Approach For reference, we will show the kNN approach of classifying our data set\n1 knn(train = train_features, test = test_features, cl = train_classes, k = 5, algorithm=c(\u0026#34;brute\u0026#34;)) ","date":"2023-04-25T00:00:00Z","image":"https://JamesL813.github.io/img/ball_tree_diagram.jpg","permalink":"https://JamesL813.github.io/p/kd-trees-and-ball-trees/","title":"KD Trees and Ball Trees"},{"content":"A simple python simulation\nSimulates a falling raindrop with air resistance and mass Used to write a paper analyzing how air resistance affects terminal velocity and distance traveled ","date":"2022-09-29T00:00:00Z","image":"https://JamesL813.github.io/p/raindrop-air-resistance-simulation/cover_hu3d03a01dcc18bc5be0e67db3d8d209a6_1704898_120x120_fill_q75_box_smart1.jpg","permalink":"https://JamesL813.github.io/p/raindrop-air-resistance-simulation/","title":"Raindrop Air Resistance Simulation"},{"content":"A simple python simulation\nSimulates a falling raindrop with air resistance and mass Used to write a paper analyzing how air resistance affects terminal velocity and distance traveled ","date":"2022-09-29T00:00:00Z","image":"https://JamesL813.github.io/p/schrodinger-equation-simulation/cover_hu3d03a01dcc18bc5be0e67db3d8d209a6_50327_120x120_fill_q75_box_smart1.jpg","permalink":"https://JamesL813.github.io/p/schrodinger-equation-simulation/","title":"Schrodinger Equation Simulation"},{"content":"A simple python simulation\nUtilizes Dijkstra’s Path-finding Algorithm Finds the shortest paths to each point from a starting point on a directed graph. ","date":"2022-06-29T00:00:00Z","image":"https://JamesL813.github.io/p/dijkstras-path-finding-algorithm-simulation/cover_hu3d03a01dcc18bc5be0e67db3d8d209a6_328480_120x120_fill_q75_box_smart1.jpg","permalink":"https://JamesL813.github.io/p/dijkstras-path-finding-algorithm-simulation/","title":"Dijkstra’s Path-finding Algorithm Simulation"},{"content":" Tool to parse through Geographic Data Uses a custom built PR Quad-Tree and Hash Table to store locations and names. Can easily query by location range and name range. ","date":"2022-05-29T00:00:00Z","image":"https://JamesL813.github.io/p/geographic-information-system/cover_hu3d03a01dcc18bc5be0e67db3d8d209a6_2254012_120x120_fill_q75_box_smart1.jpg","permalink":"https://JamesL813.github.io/p/geographic-information-system/","title":"Geographic Information System"},{"content":" Data structure made to be versatile with a variable bucket size. Less space efficiency but more speed when querying ","date":"2022-04-29T00:00:00Z","image":"https://JamesL813.github.io/p/hash-table/cover_hu3d03a01dcc18bc5be0e67db3d8d209a6_1900655_120x120_fill_q75_box_smart1.jpg","permalink":"https://JamesL813.github.io/p/hash-table/","title":"Hash Table"},{"content":" Data structure similar to a binary tree. Each node contains four, a Northwest, Northeast, Southwest, and Southeast Efficient when storing and querying data that can be identified by a location coordinate. ","date":"2022-03-29T00:00:00Z","image":"https://JamesL813.github.io/p/pr-quad-tree/cover_hu3d03a01dcc18bc5be0e67db3d8d209a6_1295522_120x120_fill_q75_box_smart1.jpg","permalink":"https://JamesL813.github.io/p/pr-quad-tree/","title":"PR Quad Tree"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\n😄\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating. — Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://JamesL813.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://JamesL813.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Block math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2019-03-08T00:00:00Z","permalink":"https://JamesL813.github.io/p/math-typesetting/","title":"Math Typesetting"}]